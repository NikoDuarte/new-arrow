{"version":3,"sources":["../../src/scripts/new.script.js"],"names":["new_apollo","name_proj","type_leng","type_serve","pathApolloDir","process","cwd","pathApolloSrc","pathApolloSrcEntry","shell","mkdir","forEach","e","touch","com","exec","err","stdout","console","log","questions","ques","name","type","message","choices","inq","prompt","exec_new","resp","create_apollo"],"mappings":";;;;;;;AAGI;;;;AAEA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACJ;AACA;;AAJI;;AAJA;AASJ,IAAMA,aAAa,SAAbA,UAAa,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,UAAvB,EAAsC;AACrD;AACA,QAAMC,gBAAmBC,QAAQC,GAAR,EAAnB,SAAoCL,SAA1C;AACA;AACA,QAAMM,gBAAgB,CACfF,QAAQC,GAAR,EADe,SACEL,SADF,WAEfI,QAAQC,GAAR,EAFe,SAEEL,SAFF,kBAGfI,QAAQC,GAAR,EAHe,SAGEL,SAHF,sBAIfI,QAAQC,GAAR,EAJe,SAIEL,SAJF,sBAKfI,QAAQC,GAAR,EALe,SAKEL,SALF,wBAMfI,QAAQC,GAAR,EANe,SAMEL,SANF,kBAOfI,QAAQC,GAAR,EAPe,SAOEL,SAPF,mBAQfI,QAAQC,GAAR,EARe,SAQEL,SARF,iBASfI,QAAQC,GAAR,EATe,SASEL,SATF,mBAAtB;AAWA;AACA,QAAMO,qBAAwBH,QAAQC,GAAR,EAAxB,SAAyCL,SAAzC,mBAAgEC,SAAtE;AACA;AACAO,sBAAMC,KAAN,CAAYN,aAAZ;AACAG,kBAAcI,OAAd,CAAsB,aAAK;AACvBF,0BAAMC,KAAN,CAAYE,CAAZ;AACH,KAFD;AAGA;AACAH,sBAAMI,KAAN,CAAYL,kBAAZ;AACA;AACA,YAAQL,UAAR;AACI,aAAK,UAAL;AACIW,oCAAIC,IAAJ,SACUX,aADV,kFACoGF,aAAa,IAAb,GAAoB,aAApB,GAAoC,EADxI,GAEI,UAACc,GAAD,EAAMC,MAAN,EAAiB;AACb,oBAAGD,GAAH,EAAQ;AAAE,0BAAMA,GAAN;AAAW;AACrBE,wBAAQC,GAAR,CAAYF,MAAZ;AACH,aALL;AAOA;AACJ,aAAK,YAAL;AACIH,oCAAIC,IAAJ,SACUX,aADV,mDACqEF,aAAa,IAAb,GAAoB,aAApB,GAAoC,EADzG,GAEI,UAACc,GAAD,EAAMC,MAAN,EAAiB;AACb,oBAAGD,GAAH,EAAQ;AAAE,0BAAMA,GAAN;AAAW;AACrBE,wBAAQC,GAAR,CAAYF,MAAZ;AACH,aALL;AAOA;AACJ;AACI;AApBR;AAsBA,WAAOb,aAAP;AACH,CAhDD;AAiDA;;AAxDI;AANJ;AACA;AACI;AA6DJ,IAAMgB,YAAY,SAAZA,SAAY,GAAM;AACpB,QAAMC,OAAO,CACT;AACIC,cAAM,WADV;AAEIC,cAAM,MAFV;AAGIC,iBAAS,0BAHb;AAIIC,iBAAS,CAAE,IAAF,EAAQ,IAAR;AAJb,KADS,EAOT;AACIH,cAAM,YADV;AAEIC,cAAM,MAFV;AAGIC,iBAAS,gCAHb;AAIIC,iBAAS,CAAE,UAAF,EAAc,YAAd;AAJb,KAPS,EAaT;AACIH,cAAM,WADV;AAEIC,cAAM,OAFV;AAGIC,iBAAS;AAHb,KAbS,CAAb;AAmBA,WAAOE,mBAAIC,MAAJ,CAAWN,IAAX,CAAP;AACH,CArBD;AAsBA;AACO,IAAMO,8BAAW,eAAXA,QAAW,GAAW;AAC/B;AACA;;;AAGA,QAAMC,OAAO,MAAMT,WAAnB;AACA;AAN+B,QAOvBjB,UAPuB,GAOc0B,IAPd,CAOvB1B,UAPuB;AAAA,QAOXD,SAPW,GAOc2B,IAPd,CAOX3B,SAPW;AAAA,QAOAD,SAPA,GAOc4B,IAPd,CAOA5B,SAPA;AAQ/B;AACA;;;;AAGA,QAAM6B,gBAAgB9B,WAAWC,SAAX,EAAsBC,SAAtB,EAAiCC,UAAjC,CAAtB;AACA;AACH,CAdM","file":"new.script.js","sourcesContent":["/*************/\n//*! $ Imports\n    //* |-> Shell\n    import shell from 'shelljs'\n    //* |-> chalk\n    import chalk from 'chalk'\n    //* |-> Inquirer\n    import inq from 'inquirer'\n    //* |-> Commander\n    import com from 'child_process'\n    import { stdout } from 'process'\n/*************/\n//? -_ Crear proyecto\nconst new_apollo = (name_proj, type_leng, type_serve) => {\n    //* |-> Path de donde se guardara el proyecto\n    const pathApolloDir = `${process.cwd()}/${name_proj}`\n    //* |-> Path de la carpeta donde ira el codigo\n    const pathApolloSrc = [\n        `${process.cwd()}/${name_proj}/src`,\n        `${process.cwd()}/${name_proj}/src/routes`,\n        `${process.cwd()}/${name_proj}/src/controller`,\n        `${process.cwd()}/${name_proj}/src/middleware`,\n        `${process.cwd()}/${name_proj}/src/environments`,\n        `${process.cwd()}/${name_proj}/src/helper`,\n        `${process.cwd()}/${name_proj}/src/service`,\n        `${process.cwd()}/${name_proj}/src/model`,\n        `${process.cwd()}/${name_proj}/src/database`\n    ]\n    //* |-> Path donde ira la puera de entrada index\n    const pathApolloSrcEntry = `${process.cwd()}/${name_proj}/src/index.${type_leng}`\n    //* |-> Creamos las carpetas\n    shell.mkdir(pathApolloDir)\n    pathApolloSrc.forEach(e => {\n        shell.mkdir(e)\n    });\n    //* |-> Creamos el archivo de entrada\n    shell.touch(pathApolloSrcEntry)\n    //* |-> Generamos las dependencias\n    switch (type_serve) {\n        case 'API REST':\n            com.exec(\n                `cd ${pathApolloDir}; npm init -y; npm i express cors dotenv jsonwebtoken express-validator; ${ type_leng == 'ts' ? 'tsc --init;' : '' }`,\n                (err, stdout) => {\n                    if(err) { throw err }\n                    console.log(stdout);\n                }\n            )\n            break;\n        case 'SERVER WEB':\n            com.exec(\n                `cd ${pathApolloDir}; npm init -y; npm i express cors dotenv; ${ type_leng == 'ts' ? 'tsc --init;' : '' }`,\n                (err, stdout) => {\n                    if(err) { throw err }\n                    console.log(stdout);\n                }\n            )\n            break;\n        default:\n            break;\n    }\n    return pathApolloDir\n}\n//? -_ Realizar preguntas\nconst questions = () => {\n    const ques = [\n        {\n            name: 'type_leng',\n            type: 'list',\n            message: '¿Que lenguaje utilizara?',\n            choices: [ 'js', 'ts' ]\n        },\n        {\n            name: 'type_serve',\n            type: 'list',\n            message: '¿Que quiere realizar con node?',\n            choices: [ 'API REST', 'SERVER WEB' ]\n        },\n        {\n            name: 'name_proj',\n            type: 'input',\n            message: '¿Cual es el nombre del proyecto?'\n        }\n    ]\n    return inq.prompt(ques)\n}\n//? -_ Ejecutara el script\nexport const exec_new = async() => {\n    //* |-> Preguntas nesesarias para crear el proyecto\n    /**\n     * @s (lenguaje, nombre, tipo de servicio)\n     */\n    const resp = await questions()\n    //* |-> Desestructuramos la respuesta\n    const { type_serve, type_leng, name_proj } = resp\n    //* |-> Creamos el proyecto\n    /**\n     * @s (Dependencias nesesarias node segun el tipo)\n     */\n    const create_apollo = new_apollo(name_proj, type_leng, type_serve)\n    //* |-> Mensaje de exito de la creacion\n}\n"]}